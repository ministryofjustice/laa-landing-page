name: Check for Missing Environment Variables

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  check-variables:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files in src directory
        id: changed-src-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            src/**

      - name: Find and check environment variables
        id: check-env
        if: steps.changed-src-files.outputs.any_changed == 'true'
        run: |
          # List of files where variables must exist
          files_to_check=(
            ".github/workflows/deploy_dev.yml"
            ".github/workflows/deploy_test.yml"
            ".github/workflows/deploy_prd.yml"
            "deployments/templates/deployment.yml"
          )

          # Find all unique environment variables from the changed files
          # Note: We read the file names from the output of the previous step
          env_vars=$(grep -hE '\$\{[A-Za-z0-9_]+\}' ${{ steps.changed-src-files.outputs.all_changed_files }} 2>/dev/null | sed -E 's/.*(\$\{[A-Za-z0-9_]+\}).*/\1/' | sort -u)

          if [ -z "$env_vars" ]; then
            echo "No new environment variables found in the changed files."
            echo "should_comment=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          comment_body=""
          # Check if each variable exists in the deployment files
          for var in $env_vars; do
            var_name=$(echo "$var" | sed -E 's/\$\{//' | sed -E 's/\}//')
            
            missing_in_files=()
            for file in "${files_to_check[@]}"; do
              if [ -f "$file" ] && ! grep -q "$var_name" "$file"; then
                missing_in_files+=("$file")
              elif [ ! -f "$file" ]; then
                missing_in_files+=("$file (File not found)")
              fi
            done

            if [ ${#missing_in_files[@]} -gt 0 ]; then
              if [ -z "$comment_body" ]; then
                comment_body=":warning: **Missing Environment Variables**\n\nI found new environment variables in your changes that are missing from key deployment files. Please add them to ensure deployments don't fail:\n"
              fi
              comment_body+="\n- **\`$var_name\`** is missing from:\n"
              for missing_file in "${missing_in_files[@]}"; do
                comment_body+="  - \`$missing_file\`\n"
              done
            fi
          done

          if [ -n "$comment_body" ]; then
            # Safely export the comment body for the next step
            delimiter=$(openssl rand -hex 8)
            echo "comment_body<<${delimiter}" >> $GITHUB_ENV
            echo -e "${comment_body}" >> $GITHUB_ENV
            echo "${delimiter}" >> $GITHUB_ENV
            
            echo "should_comment=true" >> $GITHUB_OUTPUT
            exit 1 # Fail the job
          else
            echo "All variables are present. Good to go!"
            echo "should_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Add comment to PR
        if: failure() && steps.check-env.outputs.should_comment == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${{ env.comment_body }}`;
            if (body && body.trim()) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }